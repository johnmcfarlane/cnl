---
name: Test

on: 
  push:
    branches:
      - '**'

jobs:
  # Build and test many combinations on Linux/OS X using Conan
  posix-conan-test:
    strategy:
      fail-fast: false
      matrix:
        name: [clang-head-analyse, gcc-head, clang-13, clang-12, clang-11, clang-10, gcc-11, gcc-10, osx-clang-13, osx-gcc-11, gcc-10-armv7]
        include:
          # Clang HEAD (w. Clang-Tidy, sanitizers)
          - name: clang-head-analyse
            compiler: clang
            version: "14"
            os: linux
            arch: x86_64
            build-type: Release
            cc: clang
            clang_tidy: "True"
            cxx: clang++
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:clang-head
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libc++
            toolchain: clang-libc++.cmake

          # GCC HEAD
          - name: gcc-head
            compiler: gcc
            version: "12"
            os: linux
            arch: x86_64
            build-type: Release
            cc: gcc
            clang_tidy: "False"
            cxx: g++
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:gcc-head
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libstdc++11
            toolchain: gcc.cmake

          # Clang-13
          - name: clang-13
            compiler: clang
            version: "13"
            os: linux
            arch: x86_64
            build-type: Release
            cc: clang
            clang_tidy: "False"
            cxx: clang++
            exceptions: "True"
            generator: "Ninja"
            int128: "False"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:clang-13-libstdcpp
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libstdc++11
            toolchain: clang.cmake

          # Clang-12 (Contrary)
          - name: clang-12
            compiler: clang
            version: "12"
            os: linux
            arch: x86_64
            build-type: Debug
            cc: clang
            clang_tidy: "False"
            cxx: clang++
            exceptions: "True"
            generator: "Unix Makefiles"
            int128: "False"
            iostreams: "False"
            linux-container: johnmcfarlane/cnl_ci:clang-12-libstdcpp
            os-version: ubuntu-20.04
            sanitize: "False"
            stdlib: libstdc++11
            toolchain: clang.cmake

          # Clang-11
          - name: clang-11
            compiler: clang
            version: "11"
            os: linux
            arch: x86_64
            build-type: Release
            cc: clang
            clang_tidy: "False"
            cxx: clang++
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:clang-11-libcpp
            os-version: ubuntu-20.04
            sanitize: "False"
            stdlib: libc++
            toolchain: clang-libc++.cmake

          # Clang-10
          - name: clang-10
            compiler: clang
            version: "10"
            os: linux
            arch: x86_64
            build-type: Release
            cc: clang
            clang_tidy: "False"
            cxx: clang++
            exceptions: "True"
            generator: "Ninja"
            int128: "False"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:clang-10-libcpp
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libc++
            toolchain: clang-libc++.cmake

          # GCC-11
          - name: gcc-11
            compiler: gcc
            version: "11"
            os: linux
            arch: x86_64
            build-type: Release
            cc: gcc-11
            clang_tidy: "False"
            cxx: g++-11
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:gcc-11
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libstdc++11
            toolchain: gcc.cmake

          # GCC-10 (Contrary)
          - name: gcc-10
            compiler: gcc
            version: "10"
            os: linux
            arch: x86_64
            build-type: Debug
            cc: gcc-10
            clang_tidy: "False"
            cxx: g++-10
            exceptions: "False"
            generator: "Unix Makefiles"
            int128: "False"
            iostreams: "False"
            linux-container: johnmcfarlane/cnl_ci:gcc-10
            os-version: ubuntu-20.04
            sanitize: "False"
            stdlib: libstdc++11
            toolchain: gcc.cmake

          # OS X Clang (latest)
          - name: osx-clang-13
            os: osx
            compiler: clang
            version: "13"
            arch: x86_64
            build-type: Release
            cc: "/usr/local/opt/llvm/bin/clang"
            clang_tidy: "False"
            cxx: "/usr/local/opt/llvm/bin/clang++"
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            iostreams: "True"
            os-version: macos-10.15
            sanitize: "True"
            stdlib: libc++
            toolchain: clang-libc++.cmake

          # OS X GCC-11
          - name: osx-gcc-11
            os: osx
            compiler: gcc
            version: "11"
            arch: x86_64
            build-type: Release
            cc: gcc-11
            clang_tidy: "False"
            cxx: g++-11
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            iostreams: "True"
            os-version: macos-10.15
            sanitize: "True"
            stdlib: libstdc++11
            toolchain: gcc.cmake

          # GCC-10 (for ARMv7)
          - name: gcc-10-armv7
            arch: armv7
            compiler: gcc
            version: "10"
            os: linux
            build-type: Release
            cc: arm-linux-gnueabi-gcc-10
            clang_tidy: "False"
            cxx: arm-linux-gnueabi-g++-10
            exceptions: "True"
            generator: "Ninja"
            int128: "False"
            iostreams: "True"
            linux-container: johnmcfarlane/cnl_ci:gcc-10-arm
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libstdc++11
            toolchain: gcc-armv7.cmake

    container: ${{matrix.linux-container}}
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}

    runs-on: ${{matrix.os-version}}

    steps:
      - uses: actions/checkout@v2

      - name: Restore caches
        uses: actions/cache@v2
        with:
          path: |
            /github/home/.conan/data
            /github/home/.ccache
            /Users/runner/Library/Caches/ccache
          key: test-${{matrix.name}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            test-${{matrix.name}}-${{github.ref}}-
            test-${{matrix.name}}-main-
            test-${{matrix.name}}-

      - name: Install Brew packages
        if: ( matrix.os == 'osx' )
        run: brew install ccache conan ninja

      - name: Initialise Conan
        run: |
          conan config install $GITHUB_WORKSPACE/.github/settings.yml
          conan profile new default --detect
          conan profile update settings.compiler=${{matrix.compiler}} default
          conan profile update settings.compiler.libcxx=${{matrix.stdlib}} default
          conan profile update settings.compiler.version=${{matrix.version}} default
          conan profile update settings.build_type=${{matrix.build-type}} default
          conan profile update settings.arch=${{matrix.arch}} default

      - name: Install dependencies
        run: |
          conan install \
            --build=missing \
            --env CONAN_CMAKE_GENERATOR="${{matrix.generator}}" \
            --env CONAN_CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/test/toolchain/${{matrix.toolchain}} \
            --options clang_tidy=${{matrix.clang_tidy}} \
            --options int128=${{matrix.int128}} \
            --options iostreams=${{matrix.iostreams}} \
            --options enable_exceptions=${{matrix.exceptions}} \
            --options sanitize=${{matrix.sanitize}} \
            --options test=all \
            $GITHUB_WORKSPACE

      - name: Build tests
        run: conan build --build --configure $GITHUB_WORKSPACE

      - name: Test library
        if: ( matrix.arch != 'armv7' )
        run: conan build --test $GITHUB_WORKSPACE

      - name: Run benchmarks
        if: ( matrix.name != 'clang-11' && matrix.arch != 'armv7' )
        run: |
          ./test/benchmark/test-benchmark --benchmark_format=csv | tee result.csv \
          "${GITHUB_WORKSPACE}"/test/benchmark/report.py result.csv

      - name: ccache report
        run: ccache -s

  # Build and test on Windows using Conan
  windows-conan-test:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, x86]
        include:
          - arch: x86_64
            cmake_arch: x64
            exceptions: "True"
            msbuild_property: x64
          - arch: x86
            cmake_arch: Win32
            exceptions: "False"
            msbuild_property: win32

    steps:
      - uses: actions/checkout@v2

      - name: Restore caches
        uses: actions/cache@v2
        with:
          path: |
            ~\AppData\Local\pip\Cache
            ~\.conan\data
            ~\.ccache
          key: test-${{matrix.arch}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            test-${{matrix.arch}}-${{github.ref}}-
            test-${{matrix.arch}}-main-
            test-${{matrix.arch}}-

      - name: Initialise Conan
        run: |
          pip.exe install conan;
          conan profile new default;
          conan profile update settings.compiler="Visual Studio" default;
          conan profile update settings.compiler.cppstd=20 default;
          conan profile update settings.os=Windows default;
          conan profile update settings.arch=${{matrix.arch}} default;
          conan profile update settings.compiler.version=16 default

      - name: Create build directory
        run: mkdir ${{runner.workspace}}\build

      - name: Install dependencies
        working-directory: ${{runner.workspace}}/build
        run: |
          conan install `
            --build=missing `
            --env CONAN_CMAKE_GENERATOR="Visual Studio 16 2019" `
            --env CONAN_CMAKE_TOOLCHAIN_FILE="$env:GITHUB_WORKSPACE"\test\toolchain\msvc.cmake `
            --options enable_exceptions=${{matrix.exceptions}} `
            --options test=all `
            --settings build_type=Release `
            $env:GITHUB_WORKSPACE

      - name: Build and run tests
        working-directory: ${{runner.workspace}}/build
        run: conan build --build --configure --test $env:GITHUB_WORKSPACE

      - name: Run benchmarks
        working-directory: ${{runner.workspace}}/build
        run: test\benchmark\Release\test-benchmark.exe

  # Build and test latest on Linux using only CMake
  linux-cmake-test:
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang-13-libcpp, gcc-11]

        include:
          - compiler: clang-13-libcpp
            cxx_extensions: "ON"
            toolchain: clang.cmake
            container: johnmcfarlane/cnl_ci:clang-13-libcpp
          - compiler: gcc-11
            cxx_extensions: "OFF"
            toolchain: gcc.cmake
            container: johnmcfarlane/cnl_ci:gcc-11

    container: ${{matrix.container}}
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Restore caches
        uses: actions/cache@v2
        with:
          path: |
            /github/home/.conan/data
            /github/home/.ccache
          key: test-${{matrix.compiler}}-${{github.ref}}-${{github.sha}}
          restore-keys: |
            test-${{matrix.compiler}}-${{github.ref}}-
            test-${{matrix.compiler}}-main-
            test-${{matrix.compiler}}-

      - name: Build and Install GTest
        run: |
          git clone https://github.com/google/googletest.git
          cd googletest
          git checkout 3c95bf552405fd0cc63cea0ca2f6c4cd89c8d356
          cmake \
            -DCMAKE_TOOLCHAIN_FILE:FILEPATH=$GITHUB_WORKSPACE/test/toolchain/${{matrix.toolchain}} \
            .
          cmake --build . --target install

      - name: Configure CNL
        run: |
          cmake \
            -DCMAKE_CXX_EXTENSIONS=${{matrix.cxx_extensions}} \
            -DCMAKE_TOOLCHAIN_FILE:FILEPATH=$GITHUB_WORKSPACE/test/toolchain/${{matrix.toolchain}} \
            $GITHUB_WORKSPACE

      - name: Build CNL
        run: cmake --build $GITHUB_WORKSPACE --target test-all

      - name: Test CNL
        run: ctest --output-on-failure

      - name: ccache report
        run: ccache -s

  # Install on mature Linux distro using only CMake
  linux-cmake-install:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure CNL
        run: cmake $GITHUB_WORKSPACE

      - name: Install CNL
        run: sudo cmake --build $GITHUB_WORKSPACE --target install

  # Test shell scripts
  clang-format:
    runs-on: ubuntu-20.04
    container: johnmcfarlane/cnl_ci:clang-13
    steps:
      - uses: actions/checkout@v2

      - name: Format code
        shell: bash
        run: $GITHUB_WORKSPACE/test/scripts/clang-format

      - name: Show/test for changes
        shell: bash
        run: |
          git diff
          if [[ `git status --porcelain` ]]; then exit 1; fi

  # Test shell scripts
  shellcheck:
    runs-on: ubuntu-20.04
    container: johnmcfarlane/cnl_ci:base-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Run shellcheck
        shell: bash
        run: $GITHUB_WORKSPACE/test/scripts/shellcheck

  # Test markdown
  markdownlint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Run markdownlint
        shell: bash
        run: |
          sudo snap install mdl
          $GITHUB_WORKSPACE/test/scripts/markdownlint

  # Test YAML
  yamllint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Run yamllint
        shell: bash
        run: |
          sudo apt install yamllint
          $GITHUB_WORKSPACE/test/scripts/yamllint

  # Test documentation generation
  doxygen:
    runs-on: ubuntu-18.04
    container: johnmcfarlane/cnl_ci:gcc-10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Generate documentation
        shell: bash
        run: $GITHUB_WORKSPACE/doc/generate

      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: ${{github.workspace}}/htdocs
...
