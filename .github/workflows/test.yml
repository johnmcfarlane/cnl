name: Test

on: 
  push:
    branches:
      - '**'

jobs:
  # Build and test many combinations on Linux/OS X using Conan
  posix-conan-test:
    strategy:
      fail-fast: false
      matrix:
        name: [clang-11, osx-gcc-10, gcc-10, clang-11-sanitize, armv7]
        include:
          # Clang-11 (w. Clang-Tidy)
          - name: clang-11
            compiler: clang
            version: "11"
            os: linux
            arch: x86_64
            build-type: Release
            cc: clang
            cxx: clang++
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            linux-container: johnmcfarlane/cnl_ci:clang-11-libcpp
            os-version: ubuntu-20.04
            sanitize: "False"
            stdlib: libc++
            toolchain: clang-tidy-libc++.cmake

          # OS X
          - name: osx-gcc-10
            os: osx
            compiler: gcc
            version: "10"
            arch: x86_64
            build-type: Release
            cc: gcc-10
            cxx: g++-10
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            os-version: macos-10.15
            sanitize: "False"
            stdlib: libstdc++11
            toolchain: gcc.cmake

          # GCC-10 (Contrary)
          - name: gcc-10
            compiler: gcc
            version: "10"
            os: linux
            arch: x86_64
            build-type: Debug
            cc: gcc-10
            cxx: g++-10
            exceptions: "False"
            generator: "Unix Makefiles"
            int128: "False"
            linux-container: johnmcfarlane/cnl_ci:gcc-10
            os-version: ubuntu-20.04
            sanitize: "False"
            stdlib: libstdc++11
            toolchain: gcc.cmake

          # Clang-11 (w. ASan + UBSan)
          - name: clang-11-sanitize
            compiler: clang
            version: "11"
            os: linux
            arch: x86_64
            build-type: Release
            cc: clang
            cxx: clang++
            exceptions: "True"
            generator: "Ninja"
            int128: "True"
            linux-container: johnmcfarlane/cnl_ci:clang-11-libcpp
            os-version: ubuntu-20.04
            sanitize: "True"
            stdlib: libc++
            toolchain: clang-libc++.cmake

          # GCC-10 (for ARMv7)
          - name: armv7
            arch: armv7
            compiler: gcc
            version: "10"
            os: linux
            build-type: Release
            cc: arm-linux-gnueabi-gcc-10
            cxx: arm-linux-gnueabi-g++-10
            exceptions: "True"
            generator: "Ninja"
            int128: "False"
            linux-container: johnmcfarlane/cnl_ci:gcc-10
            os-version: ubuntu-20.04
            sanitize: "False"
            stdlib: libstdc++11
            toolchain: gcc-armv7.cmake

    container: ${{matrix.linux-container}}
    env:
      CC: ${{matrix.cc}}
      CXX: ${{matrix.cxx}}

    runs-on: ${{matrix.os-version}}

    steps:
    - uses: actions/checkout@v2

    - name: Install Brew packages
      if: ( matrix.os == 'osx' )
      run: brew install conan gcc@10 ninja

    - name: Install ARMv7 packages
      if: ( matrix.arch == 'armv7' )
      run: apt-get install --quiet --yes g++-10-arm-linux-gnueabi libboost-dev

    - name: Initialise Conan
      run: |
        conan remote add johnmcfarlane/cnl https://api.bintray.com/conan/johnmcfarlane/cnl && \
        conan profile new default --detect && \
        conan profile update settings.compiler=${{matrix.compiler}} default && \
        conan profile update settings.compiler.cppstd=20 default && \
        conan profile update settings.compiler.libcxx=${{matrix.stdlib}} default && \
        conan profile update settings.compiler.version=${{matrix.version}} default && \
        conan profile update settings.arch=${{matrix.arch}} default

    - name: Install dependencies
      run: |
        conan install \
          --build=missing \
          --env CONAN_CMAKE_GENERATOR="${{matrix.generator}}" \
          --env CONAN_CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/test/cmake/toolchain/${{matrix.toolchain}} \
          --options int128=${{matrix.int128}} \
          --options enable_exceptions=${{matrix.exceptions}} \
          --options sanitize=${{matrix.sanitize}} \
          --options target=test-all \
          $GITHUB_WORKSPACE

    - name: Build tests
      run: conan build --build --configure $GITHUB_WORKSPACE

    - name: Test library
      if: ( matrix.arch != 'armv7' )
      run: conan build --test $GITHUB_WORKSPACE

    - name: Run benchmarks
      if: (matrix.name=='clang-11' || matrix.name=='gcc-10')
      run: |
        ./test/benchmark/test-benchmark --benchmark_format=csv | tee result.csv \
        "${GITHUB_WORKSPACE}"/test/benchmark/report.py result.csv

  # Build and test on Windows using Conan
  windows-conan-test:
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [x86_64, x86]
        include:
          - arch: x86_64
            cmake_arch: x64
            exceptions: "True"
            msbuild_property: x64
          - arch: x86
            cmake_arch: Win32
            exceptions: "False"
            msbuild_property: win32

    steps:
    - uses: actions/checkout@v2

    - name: Initialise Conan
      run: |
        pip.exe install conan;
        conan remote add johnmcfarlane/cnl https://api.bintray.com/conan/johnmcfarlane/cnl;
        conan profile new default;
        conan profile update settings.compiler="Visual Studio" default;
        conan profile update settings.compiler.cppstd=20 default;
        conan profile update settings.os=Windows default;
        conan profile update settings.arch=${{matrix.arch}} default;
        conan profile update settings.compiler.version=16 default

    - name: Create build directory
      run: mkdir ${{runner.workspace}}\build

    - name: Install dependencies
      working-directory: ${{runner.workspace}}/build
      run: |
        conan install `
          --build=missing `
          --env CONAN_CMAKE_GENERATOR="Visual Studio 16 2019" `
          --env CONAN_CMAKE_TOOLCHAIN_FILE="$env:GITHUB_WORKSPACE"\test\cmake\toolchain\msvc.cmake `
          --options enable_exceptions=${{matrix.exceptions}} `
          --options target=test-all `
          --settings build_type=Release `
          $env:GITHUB_WORKSPACE

    - name: Build and run tests
      working-directory: ${{runner.workspace}}/build
      run: conan build --build --configure --test $env:GITHUB_WORKSPACE

    - name: Run benchmarks
      working-directory: ${{runner.workspace}}/build
      run: test\benchmark\Release\test-benchmark.exe

  # Build and test latest on Linux using only CMake
  linux-cmake-test:
    strategy:
      matrix:
        compiler: [clang-head, gcc-head]

        include:
          - compiler: clang-head
            toolchain: clang.cmake
            container: johnmcfarlane/cnl_ci:clang-head-libstdcpp
          - compiler: gcc-head
            toolchain: gcc.cmake
            container: johnmcfarlane/cnl_ci:gcc-head

    container: ${{matrix.container}}
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Build and Install GTest
      run: |
        git clone https://github.com/google/googletest.git && \
        cd googletest && \
        git checkout 3c95bf552405fd0cc63cea0ca2f6c4cd89c8d356 && \
        cmake \
          -DCMAKE_TOOLCHAIN_FILE:FILEPATH=$GITHUB_WORKSPACE/test/cmake/toolchain/${{matrix.toolchain}} \
          . && \
        cmake --build . --target install

    - name: Configure CNL
      run: |
        cmake \
          -DCMAKE_TOOLCHAIN_FILE:FILEPATH=$GITHUB_WORKSPACE/test/cmake/toolchain/${{matrix.toolchain}} \
          $GITHUB_WORKSPACE

    - name: Build CNL
      run: cmake --build $GITHUB_WORKSPACE --target test-all

    - name: Test CNL
      run: ctest --output-on-failure

  # Install on mature Linux distro using only CMake
  linux-cmake-install:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2

    - name: Configure CNL
      run: cmake $GITHUB_WORKSPACE

    - name: Install CNL
      run: sudo cmake --build $GITHUB_WORKSPACE --target install

  # Test shell scripts
  clang-format:
    runs-on: ubuntu-20.04
    container: johnmcfarlane/cnl_ci:clang-11
    steps:
    - uses: actions/checkout@v2

    - name: Format code
      shell: bash
      run: $GITHUB_WORKSPACE/test/scripts/clang-format

    - name: Show/test for changes
      shell: bash
      run: |
        git diff && \
        if [[ `git status --porcelain` ]]; then exit 1; fi

  # Test shell scripts
  shellcheck:
    runs-on: ubuntu-20.04
    container: johnmcfarlane/cnl_ci:base-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Run All Tests
      shell: bash
      run: $GITHUB_WORKSPACE/test/scripts/shellcheck

  # Test documentation generation
  doxygen:
    runs-on: ubuntu-18.04
    container: johnmcfarlane/cnl_ci:gcc-10
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Generate documentation
      shell: bash
      run: $GITHUB_WORKSPACE/doc/generate

    - name: Upload documentation
      uses: actions/upload-artifact@v2
      with:
        name: documentation
        path: ${{github.workspace}}/doc/gh-pages/
